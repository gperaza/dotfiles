#+PROPERTY: header-args:emacs-lisp :tangle ~/.emacs.d/init.el

* Load speedup
Load speed up:
#+BEGIN_SRC emacs-lisp
(let ((gc-cons-threshold most-positive-fixnum)
      (file-name-handler-alist nil))
#+END_SRC

* Setup
** Personal information
Personal information is stored in personal.el.
This file must include personal information given as
> (setq user-full-name "MY NAME"
>       user-mail-address "MY EMAIL")
#+BEGIN_SRC emacs-lisp
(load "~/.dotfiles/emacs/personal.el")
#+END_SRC

** Setting up package manager and use-package
#+begin_src emacs-lisp
;; Please don't load outdated byte code
(setq load-prefer-newer t)

(require 'package)
(setq package-enable-at-startup nil)

(setq package-archives
      '(("gnu" . "http://elpa.gnu.org/packages/")
        ("melpa" . "http://melpa.org/packages/" )
        ("elpy" . "https://jorgenschaefer.github.io/packages/")
        ("org" . "https://orgmode.org/elpa/")
        ))

(package-initialize)

;; Bootstrap `use-package'
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))

(eval-when-compile
  (require 'use-package))
(require 'bind-key)
#+end_src

** Setup path correctly
#+BEGIN_SRC emacs-lisp
(use-package exec-path-from-shell
  :ensure t
  :config
  (exec-path-from-shell-initialize))
#+END_SRC

** Some nice configurations
#+BEGIN_SRC emacs-lisp
(defun my-minibuffer-setup-hook ()
  (setq gc-cons-threshold most-positive-fixnum))

(defun my-minibuffer-exit-hook ()
  (setq gc-cons-threshold 800000))

(add-hook 'minibuffer-setup-hook #'my-minibuffer-setup-hook)
(add-hook 'minibuffer-exit-hook #'my-minibuffer-exit-hook)

;; warn when opening files bigger than 100MB
(setq large-file-warning-threshold 100000000)

;; Make backups and auto saves to the same directory
(setq backup-directory-alist '(("." . "~/.EmacsBackups")))
(setq auto-save-file-name-transforms '((".*" "~/.EmacsSaves/" t)))
#+END_SRC

** Custom set variables
#+BEGIN_SRC emacs-lisp
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(safe-local-variable-values
   (quote
    ((eval setq system-time-locale "es")
     (eval setq system-time-locale "C")
     (eval setq org-link-file-path-type 'relative)))))
#+END_SRC

* User interface
** Some nice configurations
#+BEGIN_SRC emacs-lisp
;;Start always maximized
(add-to-list 'default-frame-alist '(fullscreen . maximized))

;; Set scratch message
(setq initial-scratch-message nil)

;; Menus and bars.
(tool-bar-mode -1)
(menu-bar-mode -1)
(scroll-bar-mode -1)
(setq initial-major-mode 'org-mode)

;;Disable startup screen
(setq inhibit-startup-screen t)

;;Display column number.
(column-number-mode t)

;;Enable y/n answers
(fset 'yes-or-no-p 'y-or-n-p)

;;Show unfinished keystroke early
(setq echo-keystrokes 0.1)

;;Better frame title
(setq frame-title-format "%b")

;; Ignore system colors
(setq inhibit-x-resources t)

(global-visual-line-mode 1) ;; how long lines are handled.  This
                            ;; appears to wrap long lines visually,
                            ;; but not add line-returns

;; Set bigger font size
(set-face-attribute 'default nil :height 120)

;; color theme taken from personal.el
(load-theme personal-theme t)
#+END_SRC

** Nice scrolling, not centering after scrolling.
#+BEGIN_SRC emacs-lisp
(setq scroll-margin 0
      scroll-conservatively 10000
      scroll-preserve-screen-position 1)

(setq mouse-wheel-scroll-amount '(1 ((shift) . 1))) ;; one line at a time
(setq mouse-wheel-progressive-speed nil) ;; don't accelerate scrolling
#+END_SRC

** Page break lines
#+BEGIN_SRC emacs-lisp
(use-package page-break-lines
  :ensure t
  :config
  (setq page-break-lines-modes
        '(emacs-lisp-mode
          lisp-mode
          scheme-mode
          compilation-mode
          outline-mode
          help-mode
          latex-mode
          python-mode))
  (global-page-break-lines-mode))
#+END_SRC

* Utilities
** Bitlbee
#+BEGIN_SRC emacs-lisp
(defun i-wanna-be-social ()
  "Connect to IM networks using bitlbee."
  (interactive)
  (erc :server "localhost" :port 6667 :nick personal-bitlbee-nick))
#+END_SRC

para que bipee cuando me hablen
#+BEGIN_SRC emacs-lisp
(defun sound-sound (proc parsed)
  "probando el sonido"
  (interactive)
  (play-sound-file "/usr/share/sounds/purple/alert.wav" ))

(add-hook 'erc-text-matched-hook 'erc-beep-on-match)
(setq erc-beep-match-types '(current-nick palabra))

(add-hook 'erc-insert-post-hook
           (lambda () (goto-char (point-min))
             (when (re-search-forward
                    (regexp-quote  (erc-current-nick)) nil t) (ding))))

(defun erc-say-ni (str)
      "Play the Ni! sound file if STR contains Ni!"
      (when (string-match "hola" str)
        (play-sound-file "/usr/share/sounds/purple/send.wav")))
#+END_SRC

** Crux
Here I bind the functions I find useful, there are more. See:
https://github.com/bbatsov/crux
#+BEGIN_SRC emacs-lisp
(use-package crux
  :ensure t
  :init
  (setq crux-indent-sensitive-modes
        '(conf-mode coffee-mode haml-mode
                    python-mode slim-mode yaml-mode org-mode))
  :bind
  (("C-c o" . crux-open-with)
  ("C-c D" . crux-delete-file-and-buffer)
  ("C-c r" . crux-rename-file-and-buffer)
  ("C-c k" . crux-kill-other-buffers)
  ("C-c n" . crux-cleanup-buffer-or-region)
  ("s-k" . crux-kill-line-backwards)
  ("C-M-z" . crux-indent-defun)
  ("C-`" . crux-switch-to-previous-buffer)
  ("C-c s" . crux-swap-windows)
  ("C-a" . crux-move-beginning-of-line)
  ("C-S-<return>" . crux-smart-open-line-above)
  ("S-<return>" . crux-smart-open-line))
  :commands crux-recompile-init
  :config
  (crux-with-region-or-buffer indent-region)
  (crux-with-region-or-buffer untabify))
#+END_SRC

** Function: fill-unfill-paragraph
#+BEGIN_SRC emacs-lisp
(defun fill-or-unfill ()
  "Like `fill-paragraph', but unfill if used twice."
  (interactive)
  (let ((fill-column
         (if (eq last-command 'fill-or-unfill)
             (progn (setq this-command nil)
                    (point-max))
           fill-column)))
    (call-interactively #'fill-paragraph)))

(global-set-key [remap fill-paragraph] #'fill-or-unfill)
#+END_SRC

** Counsel
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-x C-b") 'ibuffer-other-window)
(use-package smex ;;provides history to counsel-M-x
  :ensure t)
(use-package counsel
  :ensure t
  :bind
  ("M-x" . counsel-M-x)
  ("C-s" . swiper-isearch)
  ("M-y" . counsel-yank-pop)
  ("C-x C-f" . counsel-find-file)
  ("C-x C-r" . counsel-recentf)
  ("C-h v" . counsel-describe-variable)
  ("C-h f" . counsel-describe-function)
  ("<f2> u" . counsel-unicode-char)
  ("C-c g" . counsel-ag)
  ("C-c r" . ivy-resume)
  ("C-c i" . counsel-imenu)
  ("C-x b" . ivy-switch-buffer)
  ("C-x <left>" . counsel-mark-ring)
  ("C-x <right>" . counsel-mark-ring)
  ("C-c v" . ivy-push-view)
  ("C-c V" . ivy-pop-view)
  :config
  (ivy-mode 1)
  (setq ivy-format-function #'ivy-format-function-line)
  (setq ivy-height 7)
  (setq ivy-count-format "(%d/%d) ")
  (setq ivy-initial-inputs-alist nil)
  (setq counsel-yank-pop-separator "\n--------------------------------------\n")
  (setq swiper-include-line-number-in-search t)
  (setq ivy-ignore-buffers
        '("\\` " "\\`\\*" "\\`\\*magit" "synctex.gz"))
  (setq ivy-re-builders-alist
        '((t . ivy--regex-ignore-order)))
  (ivy-add-actions 'counsel-find-file
                   '(("F" (lambda (x) (with-ivy-window (insert (file-relative-name x))))
                      "insert relative file name")
                     ("B" (lambda (x)
                            (with-ivy-window
                              (insert (file-name-nondirectory (replace-regexp-in-string "/\\'" "" x)))))
                      "insert file name without any directory information")))
  )

(use-package ivy-rich
  :ensure t
  :config (ivy-rich-mode 1))
#+END_SRC

** Magit
#+BEGIN_SRC emacs-lisp
(use-package magit
  :ensure t
  :bind ("C-x g" . magit-status))
#+END_SRC

** Undo
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-z") 'undo)
#+END_SRC

** Flyspell
#+BEGIN_SRC emacs-lisp
(use-package flyspell
  :config
  ;; use aspell instead of ispell
  (setq ispell-program-name "aspell"
        ispell-extra-args '("--sug-mode=ultra"))
  (add-hook 'text-mode-hook 'turn-on-flyspell)
  (setq flyspell-tex-command-regexp
        "\\(\\(begin\\|end\\)[  ]*{\\|\\(cite[a-z*]*\\|label\\|ref\\|eqref\\|usepackage\\|documentclass\\|bibliographystyle\\)[         ]*\\(\\[[^]]*\\]\\)?{[^{}]*\\)")
)

(use-package flyspell-correct-ivy
  :ensure t
  :config
  (define-key
    flyspell-mode-map (kbd "C-;") #'flyspell-correct-previous-word-generic))
#+END_SRC

** Company
#+BEGIN_SRC emacs-lisp
(use-package company
  :ensure t
  :config
  (global-set-key (kbd "s-ยบ") 'company-complete)
  (add-hook 'after-init-hook 'global-company-mode)
  (setq company-backends (delete 'company-bbdb company-backends))
  (setq company-backends (delete 'company-nxml company-backends))
  (setq company-backends (delete 'company-css company-backends))
  (setq company-backends (delete 'company-eclim company-backends))
  (setq company-backends (delete 'company-clang company-backends))
  (setq company-backends (delete 'company-xcode company-backends))
  (setq company-backends (delete 'company-cmake company-backends))
  (setq company-backends (delete 'company-oddmuse company-backends))
  (setq company-backends (delete 'company-dabbrev company-backends))
  )

(use-package company-math
  :ensure t
  :config
  (add-to-list 'company-backends 'company-math-symbols-unicode))

(defun my-company-latex-mode-setup ()
  (setq-local company-backends
              (append '((company-math-symbols-latex company-latex-commands))
                      company-backends)))
(add-hook 'LaTeX-mode-hook 'my-company-latex-mode-setup)

;; Company for org-mode. Org-mode uses pcomplete for it's own
;; completion. We add it to the capf backend.
(defun add-pcomplete-to-capf ()
  (add-hook 'completion-at-point-functions 'pcomplete-completions-at-point nil t))
(add-hook 'org-mode-hook #'add-pcomplete-to-capf)

;; (defun my-company-org-mode-setup ()
;;   (setq-local company-backends
;;               (append '(company-ob-ipython)
;;                       company-backends)))
;; (add-hook 'org-mode-hook 'my-company-org-mode-setup)
#+END_SRC

** Function: open-term-here
A function for opening an external terminal emulator in the current
path.

#+BEGIN_SRC emacs-lisp
(defun open-term-here ()
  (interactive)
  "Open a terminal in current buffer's path."
  (call-process
   "xfce4-terminal"
   nil 0 nil
   (concat "--working-directory="
           (file-name-directory (or load-file-name buffer-file-name)))))
(global-set-key (kbd "C-c t") 'open-term-here)
#+END_SRC

** Save recent files
#+BEGIN_SRC emacs-lisp
(use-package recentf
  :config
  (setq recentf-save-file (expand-file-name "recentf" "~/.emacs.d/savefile/")
        recentf-max-saved-items 50
        ;; disable recentf-cleanup on Emacs start, because it can cause
        ;; problems with remote files
        recentf-auto-cleanup 'never)

  (defun prelude-recentf-exclude-p (file)
    "A predicate to decide whether to exclude FILE from recentf."
    (let ((file-dir (file-truename (file-name-directory file))))
      (-any-p (lambda (dir)
                (string-prefix-p dir file-dir))
              (mapcar 'file-truename (list "~/.emacs.d/savefile/" "~/.emacs.d/elpa/")))))

  (add-to-list 'recentf-exclude 'prelude-recentf-exclude-p)
  (add-to-list 'recentf-exclude "COMMIT_EDITMSG\\'")
  (add-to-list 'recentf-exclude "\\.png\\'")
  (add-to-list 'recentf-exclude "\\org-clock-save.el\\'")
  (add-to-list 'recentf-exclude "\\.gz\\'")
  (add-to-list 'recentf-exclude "\\.log\\'")
  (add-to-list 'recentf-exclude "\\.orhc-bibtex-cache\\'")

  (recentf-mode +1))
#+END_SRC

** Yasnippet
#+BEGIN_SRC emacs-lisp
(use-package yasnippet
  :ensure t
  :config
  (yas/global-mode 1)
  )  ;; (define-key yas-minor-mode-map (kbd "s-<tab>") 'yas-expand)
  ;; (define-key yas-minor-mode-map [(tab)]        nil)
  ;; (define-key yas-minor-mode-map (kbd "TAB")    nil)
  ;; (define-key yas-minor-mode-map (kbd "<tab>")  nil))
#+END_SRC

** Ivy-bibtex
#+BEGIN_SRC emacs-lisp
(use-package ivy-bibtex
  :ensure t
  :config
  (setq bibtex-completion-bibliography
        '("/home/gperaza/Documents/Library/bibliography.bib"))
  (setq bibtex-completion-pdf-field "file")
  (setq bibtex-completion-notes-path
        "/home/gperaza/Documents/Library/BibNotes")
  (setq bibtex-completion-pdf-open-function
        (lambda (fpath)
          (call-process "okular" nil 0 nil fpath)))
  (setq bibtex-completion-cite-prompt-for-optional-arguments nil)
)
#+END_SRC

** Thesaurus
#+BEGIN_SRC emacs-lisp
(use-package mw-thesaurus
  :ensure t
  :bind (("s-T" . mw-thesaurus-lookup-at-point)))
#+END_SRC

** Wordnik dictionary
#+BEGIN_SRC emacs-lisp
(use-package define-word
  :ensure t
  :bind (("s-w" . define-word-at-point)))
#+END_SRC

** Helpful, better help buffer
#+BEGIN_SRC emacs-lisp
(use-package helpful
  :ensure t
  :config
  (global-set-key (kbd "C-h f") #'helpful-callable)
  (global-set-key (kbd "C-h v") #'helpful-variable)
  (global-set-key (kbd "C-h k") #'helpful-key))
#+END_SRC

** PDF Tools
#+BEGIN_SRC emacs-lisp
(use-package pdf-tools
  :ensure t
  :config
  (pdf-tools-install)
  (setq pdf-view-auto-slice-minor-mode t))
#+END_SRC

** Org wiki
#+begin_src emacs-lisp
(use-package org-wiki
  :ensure helm
  :load-path "~/.dotfiles/emacs/org-wiki"
  )
#+end_src

** Org-recipes
Org recipes requires helm, so we need to install it.
#+begin_src emacs-lisp
(use-package org-recipes
  :ensure helm
  :load-path "~/.dotfiles/emacs/org-recipes"
  )
#+end_src

* Editing configuration
** Some general editing configurations
#+BEGIN_SRC emacs-lisp
;; always follow symlinks of vc files
(setq vc-follow-symlinks t)

;; don't use tabs to indent
(setq-default indent-tabs-mode nil)

;; Require new line at the end of a file
(setq require-final-newline t)

;;Delete selection when copying/writing on top
(delete-selection-mode t)

;;Auto revert files
(global-auto-revert-mode t)

;;Enable narrowing commands
(put 'narrow-to-region 'disabled nil)
(put 'narrow-to-defun 'disabled nil)

;;Enable erase-buffer command
(put 'erase-buffer 'disabled nil)

;; Make ediff use one frame
(setq ediff-window-setup-function 'ediff-setup-windows-plain)

;;Treat camel case words (camelCase) as separate words.
(global-subword-mode 1)

;;Allow typing TeX characters after toggling the input method with C-\
(setq default-input-method 'TeX)

;;Remember location in a file when saving
(require 'saveplace)
(setq-default save-place t)
;; For emacs 25 do (save-place-mode 1)

;; Turn on auto fill
;; (add-hook 'text-mode-hook 'turn-on-auto-fill)

;;Set fill column
(setq-default fill-column 80)

;; Save whateverโs in the current (system) clipboard before
;; replacing it with the Emacsโ text.
(setq save-interprogram-paste-before-kill t)

;; Disable all version control. makes startup and opening files much faster
;; except git which I actually use
(setq vc-handled-backends '(Git))
#+END_SRC

** White space mode
#+BEGIN_SRC emacs-lisp
(setq-default indicate-empty-lines t)
(setq-default show-trailing-whitespace t)
#+END_SRC

** Move lines or region up and down
To imitate move lines outside org mode.
#+BEGIN_SRC emacs-lisp
(use-package move-text
  :ensure t
  :config
  (global-set-key (kbd "M-S-<up>")  'move-text-up)
  (global-set-key (kbd "M-S-<down>") 'move-text-down))
#+END_SRC

** Make C-w/M-w kill/copy single line when not selection is active
#+BEGIN_SRC emacs-lisp
(defadvice kill-region (before smart-cut activate compile)
  "When called interactively with no active region, kill a single line instead."
  (interactive
   (if mark-active (list (region-beginning) (region-end))
     (list (line-beginning-position)
           (line-beginning-position 2)))))

(use-package easy-kill
  :ensure t
  :config
  (global-set-key [remap kill-ring-save] 'easy-kill)
  (global-set-key [remap mark-sexp] 'easy-mark))
#+END_SRC

** Expand region
#+BEGIN_SRC emacs-lisp
(use-package expand-region
  :ensure t
  :bind ("M-2" . er/expand-region))
#+END_SRC

** Automatically indent yanked text in programming modes
#+BEGIN_SRC emacs-lisp
(defun yank-advised-indent-function (beg end)
  "Do indentation, as long as the region isn't too large."
  (if (<= (- end beg) 1000)
      (indent-region beg end nil)))

(defcustom prelude-yank-indent-modes '(LaTeX-mode TeX-mode)
  "Modes in which to indent regions that are yanked (or yank-popped).
      Only modes that don't derive from `prog-mode' should be listed here."
  :type 'list
  :group 'prelude)

(defmacro advise-commands (advice-name commands class &rest body)
  "Apply advice named ADVICE-NAME to multiple COMMANDS.
      The body of the advice is in BODY."
  `(progn
     ,@(mapcar (lambda (command)
                 `(defadvice ,command (,class ,(intern (concat (symbol-name command) "-" advice-name)) activate)
                    ,@body))
               commands)))

(advise-commands "indent" (yank yank-pop) after
                 "If current mode is one of `prelude-yank-indent-modes',
      indent yanked text (with prefix arg don't indent)."
                 (if (and (not (ad-get-arg 0))
                          (not (member major-mode crux-indent-sensitive-modes))
                          (or (derived-mode-p 'prog-mode)
                              (member major-mode prelude-yank-indent-modes)))
                     (let ((transient-mark-mode nil))
                       (yank-advised-indent-function (region-beginning) (region-end)))))
#+END_SRC

** Compilation
Let's customize the behavior of the compilation process. We always to
save when compiling, no need to ask. Also, if a previous compilation
process exists, kill it before starting a new one. Finally,
automatically scroll to first error.

We can interpret the ansi color escape codes to colorize the
compilation buffer. For this we follow Malabarba's [[http://endlessparentheses.com/ansi-colors-in-the-compilation-buffer-output.html?source=rss][advice]].

Also, automatically close the compilation buffer when compilation
succeeds without error.

#+BEGIN_SRC emacs-lisp
(require 'compile)
(setq compilation-ask-about-save nil
      compilation-always-kill t
      compilation-scroll-output 'first-error)

(require 'ansi-color)
(defun endless/colorize-compilation ()
  "Colorize from `compilation-filter-start' to `point'."
  (let ((inhibit-read-only t))
    (ansi-color-apply-on-region
     compilation-filter-start (point))))

(add-hook 'compilation-filter-hook
          #'endless/colorize-compilation)

(defun bury-compile-buffer-if-successful (buffer string)
  "Bury a compilation buffer if succeeded without warnings "
  (if (and
       (string-match "compilation" (buffer-name buffer))
       (string-match "finished" string)
       (not
        (with-current-buffer buffer
          (goto-char (point-min))
          (search-forward "warning" nil t))))
      (run-with-timer 1 nil 'winner-undo)))
(add-hook 'compilation-finish-functions 'bury-compile-buffer-if-successful)
#+END_SRC

** Hungry delete
#+BEGIN_SRC emacs-lisp
(use-package hungry-delete
:ensure t
:bind (("s-<backspace>" . hungry-delete-backward)
       ("s-<delete>" . hungry-delete-forward)))
#+END_SRC

* Navigation
** Misc
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-x k") 'kill-this-buffer)
(global-set-key (kbd "C-x w") 'kill-buffer-and-window)
#+END_SRC

** Avy
#+BEGIN_SRC emacs-lisp
(use-package avy
  :ensure t
  :bind
  (("M-l" . avy-goto-line)
   ("M-s" . avy-goto-word-or-subword-1)))
#+END_SRC

** Winner mode, undo-redo window configuration
#+BEGIN_SRC emacs-lisp
(use-package winner
  :config (winner-mode 1))
#+END_SRC

* LaTeX
#+BEGIN_SRC emacs-lisp
(use-package tex
  :ensure auctex
  :config
  (setq-default TeX-master nil)
  (setq TeX-auto-save t)
  (setq TeX-parse-self t)
  (setq TeX-electric-math (cons "$" "$"))
  (setq TeX-save-query nil)

  (setq TeX-view-program-selection '((output-pdf "PDF Tools"))
        TeX-source-correlate-start-server t)
  ;; Update PDF buffers after successful LaTeX runs
  (add-hook 'TeX-after-compilation-finished-functions
            #'TeX-revert-document-buffer)

  (add-hook 'LaTeX-mode-hook
            (lambda ()
              (flyspell-mode t)
              ;;(TeX-PDF-mode -1)
              (TeX-fold-mode t)
              (turn-on-reftex)
              (TeX-source-correlate-mode t)
              (setq TeX-command-extra-options "--shell-escape")
              (LaTeX-math-mode t)))

  ;; reftex settings
  (setq reftex-enable-partial-scans t)
  (setq reftex-use-multiple-selection-buffers t)
  (setq reftex-plug-into-AUCTeX t)
  (setq reftex-ref-macro-prompt nil)

  (setq TeX-outline-extra '(("\\\\frametitle\\b" 2)))
  (setq font-latex-user-keyword-classes
          '(("my-red-commands"
             (("del" "[{"))
             (:foreground "red"
              :strike-through t)
             command)
            ("my-blue-commands"
             (("add" "[{")
              ("rep" "[{{"))
             (:foreground "dodger blue")
             command)
            ("my-yellow-commands"
             (("comment" "{{"))
             (:foreground "yellow")
             command)))
 )
#+END_SRC

* org-mode
** Configuration of org-mode
#+BEGIN_SRC emacs-lisp
(use-package org
   :ensure org-plus-contrib
   :config
   ;; Needs cdlatex package
   (add-hook 'org-mode-hook 'turn-on-org-cdlatex)
)

;; Make editing invisible regions smart
(setq org-catch-invisible-edits 'smart)

;; Allow lists with letters in them.
(setq org-list-allow-alphabetical t)

;; setup archive location in archive directory in current folder
(setq org-archive-location "archive/%s_archive::")
#+END_SRC

** Speed commands
#+BEGIN_SRC emacs-lisp
;; To see a list of available commands press ? with the cursor at the beginning
;; of a headline.
(setq org-use-speed-commands t)

(add-to-list 'org-speed-commands-user (cons "P" 'org-set-property))
(add-to-list 'org-speed-commands-user (cons "d" 'org-deadline))

;; Mark a subtree
(add-to-list 'org-speed-commands-user (cons "m" 'org-mark-subtree))

;; Widen
(add-to-list 'org-speed-commands-user (cons "S" 'widen))
#+END_SRC

** Appearance
#+BEGIN_SRC emacs-lisp
;; Align text at column 1
(setq org-adapt-indentation nil)

;; Start with contents displayed
(setq org-startup-folded 'content)

;; Increase the size of latex fragments in text:
(plist-put org-format-latex-options :scale 1.5)

;; Highlight Latex fragments
(setq org-highlight-latex-and-related '(latex script entities))
(set-face-foreground 'org-latex-and-related "blue")
#+END_SRC

** Images in org-mode
#+BEGIN_SRC emacs-lisp
;; Disable inline images
(defun org-display-inline-images (&optional include-linked refresh beg end)
  "This function is disabled. I dont like inline images."
  (interactive "P")
  (message "Disabled functionality"))

;; Enable pdf and eps images in org-mode
;; Suggested on the org-mode maillist by Julian Burgos
(add-to-list 'image-file-name-extensions "pdf")
(add-to-list 'image-file-name-extensions "eps")

(add-to-list 'image-type-file-name-regexps '("\\.eps\\'" . imagemagick))
(add-to-list 'image-file-name-extensions "eps")
(add-to-list 'image-type-file-name-regexps '("\\.pdf\\'" . imagemagick))
(add-to-list 'image-file-name-extensions "pdf")

(setq imagemagick-types-inhibit (remove 'PDF imagemagick-types-inhibit))
#+END_SRC

** Babel settings
#+BEGIN_SRC emacs-lisp
;; use syntax highlighting in org-file code blocks
(setq org-src-tab-acts-natively t)

;; enable prompt-free code running
(setq org-confirm-babel-evaluate nil
      org-confirm-elisp-link-function nil
      org-confirm-shell-link-function nil)

;; no extra indentation in the source blocks
(setq org-src-preserve-indentation t)

(add-to-list 'org-babel-default-header-args '(:eval . "no-export"))

;; Disable Flycheck when editing code blocks.
(defun disable-flycheck-in-org-src-block ()
  (setq-local flycheck-disabled-checkers '(emacs-lisp-checkdoc)))
(add-hook 'org-src-mode-hook 'disable-flycheck-in-org-src-block)

;; Edit code in same window
(setq org-src-window-setup 'current-window)


(use-package jupyter
  :ensure t)

;; Register languages in org-mode
(require 'ob-shell)
(org-babel-do-load-languages
 'org-babel-load-languages
 '((emacs-lisp . t)
   (python . t)
   (shell . t)
   (org . t)
   (C . t)
   (latex . t)
   (awk . t)
   (gnuplot . t)
   (dot . t)
   (jupyter . t)))

(setq org-babel-default-header-args:jupyter-python '((:async . "no")
                                                     (:session . "py")
                                                     (:kernel . "python3")))
(org-babel-jupyter-override-src-block "python")

(add-to-list 'org-src-lang-modes '("dot" . "graphviz-dot"))

(setq org-babel-default-header-args:python
      '((:results . "output replace")
	(:session . "none")
	(:exports . "both")
	(:cache .   "no")
	(:noweb . "no")
	(:hlines . "no")
	(:tangle . "no")
	(:eval . "never-export")))

;; (use-package ob-ipython
;;   :ensure t
;;   :config
;;   (setq org-babel-default-header-args:ipython
;;         '((:results . "replace drawer")
;;           (:session . "ipython")
;;           (:exports . "both")
;;           (:cache .   "no")
;;           (:noweb . "no")
;;           (:hlines . "no")
;;           (:tangle . "no")
;;           (:eval . "never-export"))))
#+END_SRC

** Footnotes
In-line and still reference-able footnote definitions. Footnotes have
random unique id's and being inline means it is difficult to mess up
references by deleting stuff.

#+BEGIN_SRC emacs-lisp
(setq org-footnote-define-inline t)
(setq org-footnote-auto-label 'random)
(setq org-footnote-auto-adjust nil)
#+END_SRC

** Org mode links
Enable storing, inserting and following links in any buffer:

#+BEGIN_SRC emacs-lisp
(global-set-key "\C-cl" 'org-store-link)
(global-set-key "\C-cL" 'org-insert-link-global)
(global-set-key "\C-co" 'org-open-at-point-global)

(setq org-file-apps
      '((auto-mode . emacs)
        ("\\.mm\\'" . default)
        ("\\.x?html?\\'" . "firefox %s")
        ("\\.pdf\\'" . "atril %s")
        ("\\.png\\'" . "feh -B white %s")
        ("\\.jpg\\'" . "pqiv -i %s")
        ("\\.svg\\'" . "pqiv -i %s")))
#+END_SRC

** Navigation
Function that replaces the entire key map for narrow widen in org.
Narrowing is really useful to focus only on the relevant section we
want to edit. Now we can narrow/widen smartly using only
C-x n. Works globally, not only in org-mode, perhaps I should move
this elsewhere.

#+BEGIN_SRC emacs-lisp
(defun latex-narrow-to-section ()
  "Narrow to current section"
  (LaTeX-mark-section)
  (call-interactively 'narrow-to-region)
  (deactivate-mark))

(defun latex-on-section-header ()
  "Return non-nil if point is on a section header."
  (if (string-match "\\`\\\\\\(sub\\)*section{.*}" (thing-at-point 'line t))
       t nil))

(defun narrow-or-widen-dwim (p)
  "Widen if buffer is narrowed, narrow-dwim otherwise.
Dwim means: region, org-src-block, org-subtree, or
defun, whichever applies first. Narrowing to
org-src-block actually calls `org-edit-src-code'.

With prefix P, don't widen, just narrow even if buffer
is already narrowed."
  (interactive "P")
  (declare (interactive-only))
  (cond ((and (buffer-narrowed-p) (not p)) (widen))
        ((region-active-p)
         (narrow-to-region (region-beginning)
                           (region-end)))
        ((derived-mode-p 'org-mode)
         ;; `org-edit-src-code' is not a real narrowing
         ;; command. Remove this first conditional if
         ;; you don't want it.
         (cond ((ignore-errors (org-edit-src-code) t)
                (delete-other-windows))
               ((ignore-errors (org-narrow-to-block) t))
               (t (org-narrow-to-subtree))))
        ((derived-mode-p 'latex-mode)
         (if (latex-on-section-header)
             (latex-narrow-to-section)
           (LaTeX-narrow-to-environment)))
        (t (narrow-to-defun))))

;; This line actually replaces Emacs' entire narrowing
;; keymap, that's how much I like this command. Only
;; copy it if that's what you want.
(define-key ctl-x-map "n" #'narrow-or-widen-dwim)
(add-hook 'LaTeX-mode-hook
          (lambda ()
            (define-key LaTeX-mode-map "\C-xn"
              nil)
            ;; (define-key LaTeX-mode-map "\C-ci" 'counsel-outline)
            ))
#+END_SRC

** Latex Export Settings
#+BEGIN_SRC emacs-lisp
(require 'ox-latex)
(require 'ox-html)
(require 'ox-koma-letter)
#+END_SRC

*** LaTeX back-end configuration
The LaTeX back-end needs some extra configuration.

Define extra packages to be included in latex exports.

#+BEGIN_SRC emacs-lisp
;; (setq org-latex-packages-alist
;;       '(("" "lmodern" nil);; latin modern fonts
;;         ("" "mathtools" t);; superseeds amsmath
;;         ("" "url" nil);; enable \url{} for urls
;;         ("" "color" nil)
;;         ("" "amssymb" nil)
;;         ("" "amsopn" nil)
;;         ("" "nicefrac" nil)
;;         ("" "units" nil)
;;         ("" "gensymb" nil)
;;         ;; ("" "svg" nil)
;;         ))
#+END_SRC

To enable syntax highlighting for source code in LaTeX export we need
pygmentize installed. Currently it's disabled because it breaks
portability with standard LaTeX work flows, particularly my
collaborators don't know how to compile a tex file with this enabled.
It can be enables in each buffer by manually including the minted
package via "#+LATEX_HEADER: /usepackage{minted}"

#+BEGIN_SRC emacs-lisp
;; Add minted to the defaults packages to include when exporting.
;;(add-to-list 'org-latex-packages-alist '("" "minted" nil))

;; Tell the latex export to use the minted package for source code
;; coloration.
(setq org-latex-listings 'minted)

;; Let the exporter use the -shell-escape option to let latex execute
;; external programs. This obviously and can be dangerous to activate!
(setq org-latex-minted-options
      '(("mathescape" "true")
        ("linenos" "true")
        ("numbersep" "5pt")
        ("frame" "lines")
        ("framesep" "2mm")))
(setq org-latex-pdf-process
      '("latexmk -pdflatex='pdflatex --shell-escape' -pdf %f"))
#+END_SRC

*** Export behavior
I want to interpret "_" and "^" as sub and super indices only when
braces are used.

#+BEGIN_SRC emacs-lisp
(setq org-export-with-sub-superscripts '{})
#+END_SRC

** Project templates
This is a template for a research/project aid document. The purpose of
this document is to hold task, reading list, and some quick
notes. It's available using the "<paper" expansion.

#+BEGIN_SRC emacs-lisp
;; (add-to-list 'org-structure-template-alist
;;              `("paper"
;;                ,(concat
;;                 "#+TITLE:\n"
;;                 "#+DATE:\n"
;;                 "#+PROPERTY: cookie_data recursive\n\n"
;;                 "Description:\n\n"
;;                 "* Files\n"
;;                 "* Tasks\n"
;;                 "** Writing\n"
;;                 "** Modeling\n"
;;                 "** Simulations\n"
;;                 "* Reading\n"
;;                 "** Must read\n"
;;                 "** Should read\n"
;;                 "** Already read and relevant\n"
;;                 "** Already read and not relevant\n"
;;                 "* Meetings\n")))
#+END_SRC

** Org-Download
#+BEGIN_SRC emacs-lisp
(use-package org-download
  :ensure t
  :config
  (setq-default org-download-image-dir "./figures")
  (setq-default org-download-heading-lvl nil))
#+END_SRC

** DONE [#A] [Gerardo] Org Capture 
#+BEGIN_SRC emacs-lisp
(setq org-capture-templates
      '(("t" "Todo" entry (file+olp+datetree "~/Captures.org" "Tasks")
         "* TODO %?\n  %i\n  %a")
        ("j" "Journal" entry (file+datetree "~/Captures.org")
         "* %?\nEntered on %U\n  %i\n  %a")
        ("n" "Random Note" entry (file+headline "~/Captures.org" "Notes")
         "* %?\nEntered on %U\n  %i\n  %a")
        ))
#+END_SRC
* Programming
** Fill columns indicator and line numbers
#+begin_src emacs-lisp
;; Wait for emacs 27
;; (add-hook 'prog-mode-hook #'display-fill-column-indicator-mode)
(add-hook 'prog-mode-hook #'display-line-numbers-mode)
#+end_src

** Parenthesis
#+BEGIN_SRC emacs-lisp
(show-paren-mode 1)
(setq show-paren-style 'mixed)
(electric-pair-mode 1)

(use-package rainbow-delimiters
  :ensure t
  :config
  (add-hook 'prog-mode-hook #'rainbow-delimiters-mode))

(use-package wrap-region
  :ensure t
  :config
  (wrap-region-add-wrapper "$" "$" nil 'LaTeX-mode)
  (wrap-region-global-mode t))
#+END_SRC

** Comments
#+BEGIN_SRC emacs-lisp
;; (defun comment-auto-fill ()
;;   (setq-local comment-auto-fill-only-comments t)
;;   (auto-fill-mode 1))
;; (add-hook 'prog-mode-hook 'comment-auto-fill)

(use-package comment-dwim-2
  :ensure t
  :bind ("M-;" . comment-dwim-2))
#+END_SRC

** Flycheck
#+BEGIN_SRC emacs-lisp
(use-package flycheck
  :ensure t
  :config (global-flycheck-mode 1))

(use-package flycheck-pos-tip
  :ensure t
  :config
  (with-eval-after-load 'flycheck
    (flycheck-pos-tip-mode)))
#+END_SRC

** Semantic mode
Semantic mode enables parsing of source code files.
#+BEGIN_SRC emacs-lisp
(require 'semantic)

(global-semanticdb-minor-mode 1)
(global-semantic-idle-scheduler-mode 1)
(use-package stickyfunc-enhance
  :ensure t
  :init (global-semantic-stickyfunc-mode 1))
(semantic-mode 1)

(defun my/semantic-show-summary (point)
  "Display a summary for the symbol under POINT."
  (interactive "P")
  (let* ((ctxt (semantic-analyze-current-context point))
         (pf (when ctxt
               (semantic-analyze-interesting-tag ctxt)))
        )
    (if pf
        (popup-tip (format "%s" (semantic-format-tag-summarize pf nil t)))
      (popup-tip "No summary info available"))))
(define-key semantic-mode-map (kbd "s-i") 'my/semantic-show-summary)
(define-key semantic-mode-map (kbd "s-j") 'semantic-ia-fast-jump)
#+END_SRC

** Projectile
#+BEGIN_SRC emacs-lisp
(use-package projectile
  :ensure t
  :init (setq projectile-use-git-grep t)
  :config
  (setq projectile-completion-system 'ivy)
  (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
  (projectile-global-mode))
#+END_SRC

** Python
#+BEGIN_SRC emacs-lisp
;; This eliminates an annoying message about the interpreter not using
;; readline. That doesn't seem to matter at all.
(setq warning-suppress-types '((python)
			       (emacs)))

;; Always run elpy-config to check possible issues
(use-package elpy
  :ensure t
  :config
  (elpy-enable))
;; (use-package anaconda-mode
;;   :ensure t
;;   :defer t
;;   :init
;;   (progn
;;     (add-hook 'python-mode-hook 'anaconda-mode)
;;     (add-hook 'python-mode-hook 'anaconda-eldoc-mode)
;;     )
;; )

;; (use-package company-anaconda
;;   :ensure t
;;   :config
;;   (eval-after-load "company"
;;     '(add-to-list 'company-backends 'company-anaconda)))
#+END_SRC

** C
#+BEGIN_SRC emacs-lisp
(setq-default c-basic-offset 4)
(require 'cc-mode)

;; New functions
(define-key c-mode-base-map (kbd "RET") 'newline-and-indent)

(defun my/c-compile()
  (interactive)
  (compile "make -k"))
(define-key c-mode-base-map (kbd "<f5>") 'my/c-compile)

;; c99 mode
(defun my-flycheck-c-setup ()
  (setq flycheck-gcc-language-standard "gnu99"))
(add-hook 'c-mode-hook #'my-flycheck-c-setup)

(setq c-default-style "linux"
          c-basic-offset 4)
;; function args mode
(use-package function-args
  :ensure t
  :config (fa-config-default))
#+END_SRC

** Gnuplot
#+BEGIN_SRC emacs-lisp
(use-package gnuplot-mode
  :ensure t)
#+END_SRC

** Markdown mode
#+BEGIN_SRC emacs-lisp
(use-package markdown-mode
  :ensure t)
#+END_SRC

** Graphviz
#+BEGIN_SRC emacs-lisp
(use-package graphviz-dot-mode
  :ensure t)
#+END_SRC

** ox-ipynb
Org mode exporter for Jupyter notebooks.
#+BEGIN_SRC emacs-lisp
;; (use-package ox-ipynb
;;   :load-path "~/.emacs.d/ox-ipynb/")
#+END_SRC

* End
#+BEGIN_SRC emacs-lisp
)
#+END_SRC

End.
