#!/bin/bash
# This script finds notes using a fuzzy matcher, it then opens the math in
# emacs. Is a targer does not exists an empty buffer is created. Based on deft
# for emacs. Requires fzf. Searches file name and contents, responsive for a
# small set of notes, but may become slow as note base grows.

# Options:
# -h|--help: Print help.
# -s|--search: Search for regexp in file contents,
# -n|--new: Make a new note.

# TODO: Filer by tags.
# TODO: Display filename and content preview in help window.
# TODO: Allow the creation for a new note from the search string.
# TODO: Create a template for new notes with the #+TITLE: prefix.
# TODO: Add actions: delete, rename, create.
# Customization

NOTESDIR=~/Documents/Notes/
NOTE_EXTENSION="org"
SEPARATOR=" --- "
SEP_LEN=${#SEPARATOR}
SEPARATOR="\e[0m\e[38;5;240m${SEPARATOR}\e[0m"
EMPTY_FILE_TITLE="[EMPTY file]"

# Global variables
FZF_DEFAULT_OPTS="-m --no-mouse --reverse --ansi +x --no-hscroll --inline-info"
FZF_DEFAULT_OPTS+=" --prompt='Search([tab]:help):'"
FZF_DEFAULT_OPTS+=" --preview-window=down:4:hidden"
FZF_DEFAULT_OPTS+=" --bind=tab:toggle-preview,ctrl-space:toggle"
# FZF_DEFAULT_OPTS+=" --expect=ctrl-p,ctrl-u,ctrl-n,ctrl-e,ctrl-r,ctrl-o"
# FZF_DEFAULT_OPTS+=",alt-u,alt-n,alt-a,alt-r,alt-o"
export FZF_DEFAULT_OPTS

COLUMNS=$(stty size | cut -d ' ' -f 2)
let ALLOWED_LEN=$COLUMNS-12-4

# SCRIPT

cd $NOTESDIR

while [ "$1" != "" ]; do
    case $1 in
        -s | --search )         shift
                                search_string=$1
                                ;;
        -n | --new)             shift
                                file_to_create=$1
                                ;;
        -h | --help)            shift
                                echo "-h: print this help"
                                echo "-s: search notes filenames with argument"
                                echo "-n: create a new note with argument as filename"
                                exit 0
                                ;;
        * )                     echo Not a valid argument.
                                exit 1
    esac
    shift
done

if ! [ -z "$search_string" ]; then
    line=$(grep -n --color=always -i -e "$search_string" ./*.org |
               sed "s/.\///" | fzf)
    notefile=$(echo "$line" | cut -d : -f 1)
    linenum=$(echo "$line" | cut -d : -f 2)

    if  [ -z "$notefile" ]; then exit 1; fi
    emacsclient -a '' -c +"${linenum}" "$notefile"
elif ! [ -z "$file_to_create" ]; then
    emacsclient -a '' -c "$file_to_create"
else # Run default action

    # Initially sort by modification date, newest first.
    file_list=$(ls -t ./*.${NOTE_EXTENSION})

    for file in $file_list
    do
        file=$(echo "$file" | sed "s/.\///")
        title=$(grep -m 1 "#+TITLE:" "$file" | sed "s/#+TITLE: //")
        if [ -z "$title" ]; then
            # If there is no title use filename as title.
            title=$file
        fi
        title_len=${#title}
        title="\e[0m\e[0;32m${title}\e[0m"

        summary=$(grep -m 1 "#+SUBTITLE:" "$file" | sed "s/#+SUBTITLE: //")
        # Crop summary to desired len
        let max_summary_len=$ALLOWED_LEN-$title_len-$SEP_LEN
        summary=${summary:0:$max_summary_len}
        sum_len=${#summary}
        summary="\e[0m\e[38;5;245m${summary}\e[0m"

        mod_date=$(stat "$file" | grep Modify -m 1 |
                       cut -d ' '  -f2)
        # Pad mod date to desired len
        let date_len=${#mod_date}+$ALLOWED_LEN-$title_len-$SEP_LEN-$sum_len
        mod_date=$(printf "%${date_len}s" "$mod_date")
        mod_date="\e[0m\e[0;34m${mod_date}\e[0m"

        # tags=$(grep -m 1 "#+FILETAGS:" $file | sed "s/#+FILETAGS: //")

        # Passes whole content to fzf, may slow down with large note base. Still
        # don't know if this is a good idea. Gives a lot of spurios
        # matches. Need to read fzf documantation.
        # contents=$(tr '\n' ' ' < "$file")

        line_list+="${title}${SEPARATOR}${summary} ${mod_date};${contents};${file};\n"
    done

    notefile=$(echo -e "$line_list" | fzf | rev | cut -f 2 -d ";"| rev)
    if  [ -z "$notefile" ]; then exit 1; fi
    emacsclient -a '' -c "$notefile"
fi

exit 0
